<?php

namespace WebSite\WebEngineBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * NavigationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NavigationRepository extends EntityRepository
{
    public function findAllOrdered()
    {
        return $this->findBy(array(), array('ownerId' => 'asc', 'innerOrder' => 'asc'));
    }

    public function getNextNumberByOwner($ownerId)
    {
        $countsChildren = $this->createQueryBuilder('n')
            ->select('count(n.id) as count_')
            ->where('n.ownerId=?1')->setParameter(1, $ownerId)->getQuery()->execute();
        return $countsChildren[0]['count_'] + 1;
    }


    public function reorderInOwners(Navigation $entity, $position, $oldOwnerId, $newOwnerId)
    {
        /**
         * @var $item Navigation
         */
        $collection = $this->findBy(array(
            'ownerId' => $newOwnerId,
        ), array(
            'innerOrder' => 'ASC'
        ));

        $collectionOld = array();

        if ($oldOwnerId == $newOwnerId)
        {
            if ($entity->getInnerOrder() < $position)
            {
                $beginning = $entity->getInnerOrder() + 1;
                $ending = $position;
                $increment = -1;
            }

            if ($entity->getInnerOrder() > $position)
            {
                $beginning = $position;
                $ending = $entity->getInnerOrder();
                $increment = 1;
            }
        }

        if ($oldOwnerId != $newOwnerId)
        {
            $collectionOld = $this->findBy(array(
                'ownerId' => $oldOwnerId
            ), array(
                'innerOrder' => 'ASC'
            ));


            unset($collectionOld[$entity->getInnerOrder() - 1]);

            $beginning = $position;
            $ending = $position;
            $increment = 0;
            $countInCollection = count($collection);
            if($countInCollection > 0)
            {
                $ending = $collection[$countInCollection - 1]->getInnerOrder();
                $increment = 1;
            }


        }

        foreach ($collection as $item)
        {
            if ($item->getInnerOrder() >= $beginning && $item->getInnerOrder() <= $ending)
            {
                $item->setInnerOrder($item->getInnerOrder() + $increment);
            }
        }

        $i = 1;
        foreach($collectionOld as  $item)
        {
            $item->setInnerOrder($i);
            array_unshift($collection, $item);
            $i++;
        }
        $entity->setInnerOrder($position);
        $entity->setOwnerId($newOwnerId);
        array_unshift($collection, $entity);

        $this->getEntityManager()->flush($collection);
    }
}
